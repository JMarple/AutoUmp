.globl test
	.globl ov7670_capturerow
	.globl ov7670_capturerow.nstackwords
	.linkset ov7670_capturerow.nstackwords, 10
	.align 4
	.issue_mode dual

test:
	dualentsp 1

	ldc r0, 0x89AB
	ldc r1, 0xCDEF
	ldc r2, 0x0123
	ldc r3, 0x4567

	shl r1, r1, 16
	shl r3, r3, 16

	or r0, r0, r1
	or r1, r2, r3

	unzip r0, r1, 3


	retsp 1

// r0 is the pointer to the 320x240 buffer
// r1 is the pointer to the bit buffer
// r2 is the pointer to the data port
// r3 is the pointer to the sync port
// r4 is the pointer to a 320 length temporary buffer
ov7670_capturerow:

	dualentsp (10)

	// Save register states
	stw r4, sp[2]
	stw r5, sp[3]
	stw r6, sp[4]
	stw r7, sp[5]
	stw r8, sp[6]
	stw r9, sp[7]
	stw r10, sp[8]
	stw r11, sp[9]

	// Get the actual ports from their pointers.
	ldw r2, r2[0]
	ldw r3, r3[0]

	// Get tmpBufPtr off stack
	ldw r4, sp[11]

	#define byteBufPtr r0
	#define bitBufPtr  r1
	#define dataPort   r2
	#define syncPort   r3
	#define tmpBufPtr  r4
	#define syncVal    r5
	#define y          r6
	#define x          r9

	#define hrefMask   r8
	#define countVal   r9

	ldc y, 0
	ldc x, 0

	rowsLoop:
		// Wait for HREF to go high
		setc res[syncPort], 0x1
		in syncVal, res[syncPort]
		clre
		eeu res[syncPort]
		setc res[syncPort], 0x19
		ldap r11, checkIfHREFHigh
		{setv res[syncPort], r11; ldc hrefMask, 0x10}

		waitForHREFHigh:
			setd res[syncPort], syncVal
			waiteu

		checkIfHREFHigh:
			getts countVal, res[syncPort]
			in syncVal, res[syncPort]
			and r11, syncVal, hrefMask
			bf r11, waitForHREFHigh

		// Wait 7 clock ticks and get first pixels
		add countVal, countVal, 11

		setpt res[dataPort], countVal
		setc res[dataPort], 0x1

		#undef countVal
		#undef hrefMask
		#undef syncVal
		#define dataVal  r8
		#define dataVal2 r9

		// Gather camera data and save to temporary buffer
		ldc r10, 79
		ldc r11, 0x00
		dataloop:
			{in dataVal, res[dataPort]; add y, y, 1}
			{in dataVal2, res[dataPort]; lsu r7, y, r10}
			unzip dataVal, dataVal2, 3
			stw dataVal, tmpBufPtr[y]
			bt r7, dataloop

		#define lNewVal r2
		#define rNewVal r3
		#define lOldVal r5
		#define rOldVal r6
		#define byteData r7
		#define threshold r8
		#define index r11

		// BS Threshold
		ldc threshold, 30
		ldc index, 0

		// r0 is pointer to BS buffer
		// r1 is pointer to bit buffer
		computeLoop:
			ldc byteData, 0

			ldd lNewVal, rNewVal, tmpBufPtr[index]

			ldd lOldVal, rOldVal, byteBufPtr[index]
			std lNewVal, rNewVal, byteBufPtr[index]
			add index, index, 1

			// -- Round 1 --

			// Round 1 Background Subtraction
			/*{sub lOldVal, lOldVal, lNewVal; sub rOldVal, rOldVal, rNewVal}
			{neg lNewVal, lOldVal; neg rNewVal, rOldVal}
			{lss lOldVal, threshold, lOldVal; lss rOldVal, threshold, rOldVal}
			{lss lNewVal, threshold, lNewVal; lss rNewVal, threshold, rNewVal}
			{or lOldVal, lOldVal, lNewVal; or rOldVal, rOldVal, rNewVal}

			{or byteData, byteData, lOldVal; shl rOldVal, rOldVal, 1}
			{or byteData, byteData, rOldVal; nop}
			// -------------

			// -- Round 2 --

			// Round 2 Background Subtraction
			{sub lOldVal, lOldVal, lNewVal; sub rOldVal, rOldVal, rNewVal}
			{neg lNewVal, lOldVal; neg rNewVal, rOldVal}
			{lss lOldVal, threshold, lOldVal; lss rOldVal, threshold, rOldVal}
			{lss lNewVal, threshold, lNewVal; lss rNewVal, threshold, rNewVal}
			{or lOldVal, lOldVal, lNewVal; or rOldVal, rOldVal, rNewVal}

			{shl lOldVal, lOldVal, 2; shl rOldVal, rOldVal, 3}
			{or byteData, byteData, lOldVal; nop}
			{or byteData, byteData, rOldVal; nop}
			// -------------

			// -- Round 3 --

			// Round 3 Background Subtraction
			{sub lOldVal, lOldVal, lNewVal; sub rOldVal, rOldVal, rNewVal}
			{neg lNewVal, lOldVal; neg rNewVal, rOldVal}
			{lss lOldVal, threshold, lOldVal; lss rOldVal, threshold, rOldVal}
			{lss lNewVal, threshold, lNewVal; lss rNewVal, threshold, rNewVal}
			{or lOldVal, lOldVal, lNewVal; or rOldVal, rOldVal, rNewVal}

			{shl lOldVal, lOldVal, 4; shl rOldVal, rOldVal, 5}
			{or byteData, byteData, lOldVal; nop}
			{or byteData, byteData, rOldVal; nop}
			// -------------

			// -- Round 4 --

			// Round 4 Background Subtraction
			{sub lOldVal, lOldVal, lNewVal; sub rOldVal, rOldVal, rNewVal}
			{neg lNewVal, lOldVal; neg rNewVal, rOldVal}
			{lss lOldVal, threshold, lOldVal; lss rOldVal, threshold, rOldVal}
			{lss lNewVal, threshold, lNewVal; lss rNewVal, threshold, rNewVal}
			{or lOldVal, lOldVal, lNewVal; or rOldVal, rOldVal, rNewVal}

			{shl lOldVal, lOldVal, 6; shl rOldVal, rOldVal, 7}
			{or byteData, byteData, lOldVal; nop}
			{or byteData, byteData, rOldVal; nop}
			// -------------

			st8 byteData, bitBufPtr[index]*/
			add index, index, 1

			// Determine whether to keep looping or not.
			ldc byteData, 0x80
			lss byteData, index, byteData
			bt byteData, computeLoop

		/*ldc y, 0;
		ldc x, 0;
		ldc r10, 319
		computeloop:
			{ldw dataVal, tmpBufPtr[x]; add x, x, 1}
			{shr r7, dataVal, 8; shr r8, dataVal, 24}

			st8 r7, byteBufPtr[y]
			{add y, y, 1;}
			st8 r8, byteBufPtr[y]
			{add y, y, 1; lsu r8, y, r10}

			bt r8, computeloop*/



	// Return
	ldw r4, sp[2]
	ldw r5, sp[3]
	ldw r6, sp[4]
	ldw r7, sp[5]
	ldw r8, sp[6]
	ldw r9, sp[7]
	ldw r10, sp[8]
	ldw r11, sp[9]
	retsp (10)

/*stw
			//stw dataVal, r5

			in dataVal, res[dataPort]

			{shr r7, dataVal, 8; shr r8, dataVal, 24}
			{and r7, r7, r11; and r8, r8, r11}

			{shl r7, r7, 16; shl r8, r8, 24}
			{or r9, r9, r7; add y, y, 1}
			{or r9, r9, r8; lsu r8, y, r10}

			stw r9, byteBufPtr[y];

			bt r8, dataloop*/

			// Data is extracted to r7 & r8
			/*{shr r7, dataVal, 8; shr r8, dataVal, 24}

			// Save data to bs buffer
			st8 r7, byteBufPtr[y]
			{add y, y, 1;}
			st8 r8, byteBufPtr[y]
			{add y, y, 1; lsu r8, y, r10}

			bt r8, dataloop*/

// r0 is pointer to _sync variable
// r1 is the href_bits mask
// r2 is the cam#DATA port pointer
// r3 is the buffer to save to
/*ov7670_capturerow:
	dualentsp 6

	// Save register states
	stw r4, sp[1]
	stw r5, sp[2]
	stw r6, sp[3]
	stw r7, sp[4]
	stw r8, sp[5]

	ldw r2, r2[0x00]
	ldc r4, 0x00
	ldc r5, 0x00
	ldc r6, 0x00
	ldc r7, 5*/

    /*
    The sync thread compiles to this.
     -> reads input from sync port
     -> saves data to '_sync'
    Takes 2 clock cyles for the data to be saved.
    .label9  0x000403b4: c4 b6:       in (2r)         r1, res[r0]
             0x000403b8: 00 f0 6b 50: stw (lru6)      r1, dp[0x2b]
	*/

	// This loop allows us to know exactly when
	// the variable was changed in clock ticks.
	// load -> bf -> and -> bf
	// Exactly 4 cycles since variable change.
	/*while_href_low:
		{ldw r5, r0[0x00]; and r4, r5, r1}
		bf r4, while_href_low;*/

/*
 	On input, the shift register will become full if the processor does not input data to empty
		the transfer register;
	when the processor inputs the data, the transfer register is filled from the shift register
		and the shift register will start to be re-filled from the pins.
*/

 	// At this point, 6 clock cyles has gone by since
 	// the signal changed.
	/*x_pixels_loop:
		in r0, res[r2]
		stw r0, r3[r6]
		add r6, r6, 1
		lss r8, r6, r7
		bt r8, x_pixels_loop;

	// Return
	ldw r4, sp[1]
	ldw r5, sp[2]
	ldw r6, sp[3]
	ldw r7, sp[4]
	ldw r8, sp[5]
	retsp 6*/

// r0 is port* sync
// r1 is hwlock
// r2 is the bit-mask
/*ov7670_cap:
	dualentsp 1

	ldw r0, r0[0x00]

	// While vsync/href is low
	cap1:
		// Aquire lock
		in r1, res[r1]

		// Read sync
		in r3, res[r0]

		// Release lock
		{out res[r1], r1; and r3, r3, r2}

		bf r3, cap1

	// While vsync/href is high
	cap2:
		in r1, res[r1]
		in r3, res[r0]
		{out res[r1], r1; and r3, r3, r2}
		bt r3, cap2

	retsp 1*/

/*
.label8  0x000403ec: e0 8f:       gettime (1r)    r0
         0x000403ee: ff 17:       nop (0r)
         0x000403f0: c0 b7:       in (2r)         r4, res[r4]
         0x000403f2: ff 17:       nop (0r)
         0x000403f4: ff 17:       nop (0r)
         0x000403f6: d4 08:       ldw (2rus)      r1, r5[0x0]
         0x000403f8: 41 e8:       setc (ru6)      res[r1], 0x1
         0x000403fa: ff 17:       nop (0r)
         0x000403fc: c5 b6:       in (2r)         r1, res[r1]
         0x000403fe: ff 17:       nop (0r)
         0x00040400: c0 af:       out (r2r)       res[r4], r4
         0x00040402: ff 17:       nop (0r)
         0x00040404: 67 3a:       and (3r)        r2, r1, r7
         0x00040406: e1 8f:       gettime (1r)    r1
         0x00040408: 00 f0 88 7c: bf (lru6)       r2, -0x8 <.label8>
         */
