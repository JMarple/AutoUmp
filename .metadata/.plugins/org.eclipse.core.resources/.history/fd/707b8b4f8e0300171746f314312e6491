#include <xs1.h>
#include <platform.h>
#include <stdio.h>
#include <stdint.h>

struct Object
{
    uint8_t  isBall; // -1 = not checked, 0 = no, 1 = yes
    uint16_t id; // id representing object
    uint16_t minX, maxX, minY, maxY; // lower/uppper bounds of object
    uint16_t centX, centY;
    uint16_t distanceFromCenter;
};


// pack the center data to be used for sending over uart
void packCenters(
    struct Object* objArray,
    uint8_t* buffer,
    uint16_t numObjects)
{
    for(int i = 0; i < numObjects; i++)
    {
        uint8_t xLower = objArray[i].centX & 0xFF;
        uint8_t xUpper = objArray[i].centX >> 8;
        uint8_t yLower = objArray[i].centY & 0xFF;
        uint8_t yUpper = objArray[i].centY >> 8;

        buffer[i*4] = xLower;
        buffer[i*4 + 1] = xUpper;
        buffer[i*4 + 2] = yLower;
        buffer[i*4 + 3] = yUpper;
    }
    if(numObjects < OBJECT_ARRAY_LENGTH) // send a code: we're done with our objects
    {
        for(int i = 0; i < 4; i++)
        {
            buffer[numObjects*4 + i] = 0xFF;
        }
    }
}

void unpackCenters(
    struct Object* objArray,
    uint8_t* buffer,
    uint16_t bufferLength)
{
    for(int i = 0; i < bufferLength; i+=4)
    {
        objArray[i/4].centX = (buffer[i+1] << 8) | buffer[i];
        objArray[i/4].centY = (buffer[i+3] << 8) | buffer[i+2];
    }
}

int main()
{ unsafe {


    return 0;
}}
