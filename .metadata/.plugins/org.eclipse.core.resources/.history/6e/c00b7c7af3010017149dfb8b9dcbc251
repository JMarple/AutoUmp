#include <stdint.h>
#include "util.h"
#include "algs.h"


// bitLoc is the bit location. 7 for MSB, 0 for LSB, etc.
uint8_t getBitInByte(uint8_t byte, uint32_t bitLoc)
{
    uint8_t mask = 1 << bitLoc;
    uint8_t val = ((byte & mask) >> bitLoc) & 1;
    return val;
}

// given a certain bitIndex, get that bit (stored in a byte).
// so a bitIndex of 4 will get the 4th bit.
uint8_t inline getBitInPic(uint8_t* bitPicture, uint32_t bitIndex)
{
    uint8_t val; // return value
    uint32_t byteIndex = bitIndex/8;
    uint32_t bitNum = bitIndex % 8;

    val = getBitInByte(bitPicture[byteIndex], 7-bitNum);
    return val;
}


// bitLoc is the bit location. 7 for MSB, 0 for LSB, etc.
int8_t inline setBitInByte(uint8_t* byte, uint8_t bitLoc, uint8_t bitVal)
{
    if(bitVal > 1 || bitLoc > 7)
    {
        return FUNC_ERROR;
    }
    //http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
    *byte = (*byte & ~(1 << bitLoc)) | (bitVal << bitLoc);

    return 0;
}

// given a certain bitIndex, set that bit to either 0 or 1.
int8_t inline setBitInPic(uint8_t* bitPicture, uint32_t bitIndex, uint8_t val)
{
    if(val > 1 || bitIndex >= IMG_WIDTH*IMG_HEIGHT)
    {
        return FUNC_ERROR;
    }
    uint32_t byteIndex = bitIndex/8;
    uint8_t bitNum = bitIndex % 8;

    setBitInByte(&bitPicture[byteIndex], 7-bitNum, val);

    return 0;
}
